/*
 * regex.js 
 * Created by zhujia
 */
	
/**
 * 校验密码强度	
 * 密码的强度必须是包含大小写字母和数字的组合，不能使用特殊字符，长度在8-16之间。
 */
const pwdRegex = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,16}$/g;

/**
 * 校验中文	
 * 字符串仅能是中文。
 */
const zhcnRegex = /^[\u4e00-\u9fa5]{0,}$/;

/**
 * 校验整数
 * 支持正整数 负整数。
 */
const intRegex =  /^-?[1-9]\d*$/;

/**
 * 由数字、26个英文字母或下划线(_)组成的字符串
 */
const numLetRegex = /^\w+$/;

/**
 * 校验E-Mail 地址
 * 同密码一样，下面是E-mail地址合规性的正则检查语句。
 */
const emailRegex = /^[\w!#$%&'*+/=?^_`{|}~-]+(?:\.[\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\w](?:[\w-]*[\w])?\.)+[\w](?:[\w-]*[\w])?$/;

/**
 * 校验身份证号码
 * 分为15位和18位
 */
//15位：
const id15Regex = /^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$/;
//18位：
const id18Regex = /^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X)$/;


/**
 * 校验日期
 * “yyyy-mm-dd“ 格式的日期校验，已考虑平闰年。
 */
const dateRegex = /^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$/;

/**
 * 校验金额
 * 金额校验，精确到2位小数。
 */
const moneyRegex = /^[0-9]+(.[0-9]{2})?$/;

/**
 * 校验手机号
 * 国内 13、15、18、177 开头的手机号正则表达式。（可根据目前国内收集号扩展前两位开头号码）
 */
const cellphoneRegex = /^(+86-)?(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9]|17[0|6|7|8])\d{8}$/;

/**
 * 校验国内电话号码
 * 三位区号+八位电话 四位区号+七/八位电话
 */
const phoneRegex = /^\d{3}-\d{8}|\d{4}-\{7,8}$/

/**
 * 判断IE的版本
 * IE目前还没被完全取代，很多页面还是需要做版本兼容，下面是IE版本检查的表达式。
 */
const ieRegex = /^.*MSIE [5-8](?:\.[0-9]+)?(?!.*Trident\/[5-9]\.0).*$/;

/**
 * 校验IP-v4地址
 * IP4 正则语句。
 */
const ipv4Regex = /^\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b$/;

/**
 * 校验IP-v6地址
 * IP6 正则语句。
 */
const ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))*/;

/**
 * 检查URL的前缀
 * 应用开发中很多时候需要区分请求是HTTPS还是HTTP，通过下面的表达式可以取出一个url的前缀然后再逻辑判断。
 */
if (!s.match(/^[a-zA-Z]+:\/\/$/))
{
    s = 'http://' + s;
}

/**
 * 提取URL链接	
 * 下面的这个表达式可以筛选出一段文本中的URL。
 */
const urlRegex = /^(f|ht){1}(tp|tps):\/\/([\w-]+\.)+[\w-]+(\/[\w- ./?%&=]*)?^/;

/**
 * 提取Color Hex Codes
 * 有时需要抽取网页中的颜色代码，可以使用下面的表达式。
 */
const hexColorRegex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;
